[[1994.]
 [2281.]
 [1929.]
 [2076.]
 [1945.]
 [1775.]
 [1971.]
 [2093.]
 [1922.]
 [2014.]]
(20000, 784)
(20000, 1)
(20000, 785)
Shapes of thetas
(25, 785)
(10, 26)
(19885,)
(20000, 10)
[[0. 0. 0. ... 0. 0. 0.]
 [1. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 ...
 [0. 1. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 [0. 0. 1. ... 0. 0. 0.]]
(10000, 1)
(10000, 784)
('Lambda is ', 1000)
now we are optimizing the cost function
('Lowest cost function for lambda value of ', 1000, 'is ', '2.9282186866064683', 'training size was ', 20000)
Percentages each number was guessed correctly using a neural network
(10, 1)
[[97.44897959]
 [99.38325991]
 [55.13565891]
 [86.63366337]
 [75.25458248]
 [ 4.8206278 ]
 [90.08350731]
 [89.49416342]
 [21.56057495]
 [37.16551041]]
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
(10,)
('Lambda is ', 10)
now we are optimizing the cost function
('Lowest cost function for lambda value of ', 10, 'is ', '0.5099096891438942', 'training size was ', 20000)
Percentages each number was guessed correctly using a neural network
(10, 1)
[[98.87755102]
 [98.76651982]
 [93.79844961]
 [95.14851485]
 [95.51934827]
 [92.48878924]
 [96.55532359]
 [93.57976654]
 [94.25051335]
 [92.26957384]]
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
(10,)
('Lambda is ', 1)
now we are optimizing the cost function
('Lowest cost function for lambda value of ', 1, 'is ', '0.16666981088974953', 'training size was ', 20000)
Percentages each number was guessed correctly using a neural network
(10, 1)
[[97.95918367]
 [98.94273128]
 [94.86434109]
 [92.37623762]
 [94.90835031]
 [91.25560538]
 [95.72025052]
 [93.77431907]
 [94.35318275]
 [92.96333003]]
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
(10,)
('Lambda is ', 0.1)
now we are optimizing the cost function
('Lowest cost function for lambda value of ', 0.1, 'is ', '0.05459921563885983', 'training size was ', 20000)
Percentages each number was guessed correctly using a neural network
(10, 1)
[[96.93877551]
 [98.76651982]
 [94.18604651]
 [92.97029703]
 [94.50101833]
 [90.35874439]
 [96.45093946]
 [94.06614786]
 [92.09445585]
 [91.27849356]]
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
(10,)
('Lambda is ', 0.01)
now we are optimizing the cost function
('Lowest cost function for lambda value of ', 0.01, 'is ', '0.025079713744078972', 'training size was ', 20000)
Percentages each number was guessed correctly using a neural network
(10, 1)
[[97.34693878]
 [98.41409692]
 [92.92635659]
 [92.07920792]
 [95.11201629]
 [89.01345291]
 [95.61586639]
 [93.77431907]
 [91.06776181]
 [91.17938553]]
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
(10,)
testing
(1,)
[97.34693878]
[[97.34693878]
 [98.41409692]
 [92.92635659]
 [92.07920792]
 [95.11201629]
 [89.01345291]
 [95.61586639]
 [93.77431907]
 [91.06776181]
 [91.17938553]]
(10, 1)
